// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String
  displayName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions     Session[]
  portfolios   Portfolio[]
  watchlists   Watchlist[]
  gameOptions  GameOptions?

  @@map("users")
}

model Session {
  id              String   @id @default(cuid())
  userId          String
  refreshTokenHash String
  ip              String
  userAgent       String
  expiresAt       DateTime
  createdAt       DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Portfolio {
  id           String   @id @default(cuid())
  userId       String
  name         String
  baseCurrency String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  positions Position[]
  trades    Trade[]

  @@map("portfolios")
}

model Position {
  id           String    @id @default(cuid())
  portfolioId  String
  symbol       String
  quantity     Float
  avgPrice     Float
  openedAt     DateTime
  closedAt     DateTime?
  pnlRealized  Float     @default(0)

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model Trade {
  id             String      @id @default(cuid())
  portfolioId    String
  symbol         String
  side           TradeSide
  type           TradeType
  quantity       Float
  price          Float?
  status         TradeStatus @default(NEW)
  createdAt      DateTime    @default(now())
  filledAt       DateTime?
  rejectionReason String?

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchlistItems WatchlistItem[]

  @@map("watchlists")
}

model WatchlistItem {
  id          String @id @default(cuid())
  watchlistId String
  symbol      String
  note        String?
  position    Int?

  // Relations
  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@map("watchlist_items")
}

model GameOptions {
  id                    String   @id @default(cuid())
  userId                String   @unique
  startingBalance       Float
  leverageMax           Float
  riskPerTradePct       Float
  takeProfitPctDefault  Float
  stopLossPctDefault    Float
  timeframeDefault      String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_options")
}

// Enums
enum TradeSide {
  BUY
  SELL
}

enum TradeType {
  MARKET
  LIMIT
}

enum TradeStatus {
  NEW
  FILLED
  CANCELLED
  REJECTED
}
